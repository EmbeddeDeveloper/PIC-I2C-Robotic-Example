#include <REG51F.H>
#include <LCD.H>
//#include <I2C.H>
//#include <string.h>

sbit sl1=P2^0;		//row
sbit sl2=P2^1;
sbit sl3=P2^2;
sbit sl4=P2^3;

sbit krl1=P2^4;		//coloum
sbit krl2=P2^5;
sbit krl3=P2^6;
sbit krl4=P2^7;


bit key_ready,c,nkp;
unsigned char check,dcount,krcount,scan_no,key_code;


unsigned char hour,sec,min,day,weekday,month,year,temp,temp1,sec_temp;
//			  hour	minute  sec	  year	 month	 day
unsigned char hh,hl,mh,ml,sh,sl,yyh,yyl,mmh,mml,ddh,ddl;
unsigned char ascci[]={"0123456789ABCDEF"};

//------------keypad------------//
void key();
void debounce();
void release();
void timer0();
void scanner();
void init_keypad();
void key_release();
//-------------------------------------//
//---------timer 0 interrupt----------//
void isr_timer0() interrupt 1
{
	timer0();
  	scanner();  
}

//------------MAIN ROUTINE-------------//
void main()
{
	 bl=0;
	 init_lcd();
	 lcd_string("  ***Welcome***  ");
	 cmd_write(0xc0);
	 timer0();
	 init_keypad();
	 while(1)
	 {
	 	while(key_ready==0);		
		data_write(ascci[key_code]);
		key_release();			
	 }
}

//void logic()
//{
//	//tx1(0x0a);              //line feed  new line
//	//tx1(0x0d);              //carriage return
//	/*------display year-------*/
//  	yyh=year & 0xf0;
//  	yyh=yyh>>4;
//  	yyh=yyh | 0x30;
//
//  	yyl=year & 0x0f;
//  	yyl=yyl | 0x30;
//	/*------display month-------*/
//  	mmh=month & 0xf0;
//  	mmh=mmh>>4;
//  	mmh=mmh | 0x30;
//
//  	mml=month & 0x0f;
//  	mml=mml | 0x30;
//	/*------display day-------*/
//  	ddh=day & 0xf0;
//  	ddh=ddh>>4;
//  	ddh=ddh | 0x30;
//
//  	ddl=day & 0x0f;
//  	ddl=ddl | 0x30;
//	/*------display hour-------*/
//	hh=hour & 0xf0;
//  	hh=hh>>4;
//  	hh=hh | 0x30;
//
//  	hl=hour & 0x0f;
//  	hl=hl | 0x30;
//	/*------display minute-------*/
//  	mh=min & 0xf0;
//  	mh=mh>>4;
//  	mh=mh | 0x30;
//
//  	ml=min & 0x0f;
//  	ml=ml | 0x30;
//	/*------display second-------*/
//  	sh=sec_temp & 0xf0;
//  	sh=sh>>4;
//  	sh=sh | 0x30;
//
//  	sl=sec_temp & 0x0f;
//  	sl=sl | 0x30;
//} */
////----------------------------------//
///*--------rtc starts-------------*/
////initialise RTC to 12:50PM  MONDAY 22/02/2008
///*void init_rtc()
//{
//	start();
//
//	shout(0xa2);		//slave address
//	shout(0x00);		//rtc address
//	shout(0x00);		//Control/Status1
//	shout(0x00);		//Control/Status2
//	shout(0x00);		//Seconds/Vl
//	shout(0x05);		//Minutes
//	shout(0x13);		//hours
//	shout(0x28);		//Days/date						
//	shout(0x00);		//;Weekdays(sun,mon,tue,wed,thu,fri,sat)//;(000,001,010,011,100,101,110)								
//	shout(0x01);		//Month/Century(jan,feb,mar...)//(00001,00010,...)
//	shout(0x13);
//}
//  */
////reads time stamp from rtc and stores it at 30h to 36h. (7 bytes)
///*
//void read_rtc()
//{
//	start();
//
//	shout(0xa2);		//slave address (with write bit 0a2h)
//	shout(0x02);		//word address (Seconds/Vl)
//	
//	start();			//restart
//
//	shout(0xa3);		//slave address(with read bit 0a3h)
//
//	shin();
//	ack();
//	sec = (val&0x7f);	//read sec frm rtc value is in acc.
//	sec_temp=sec;
//		
//	shin();	 			//read min frm rtc value is in acc.
//	min =(val&0x7f);
//	ack();
//
//	shin();	 			//read hr frm rtc value is in acc.
//	hour =(val&0x3f);
//	ack();
//	
//	shin();				//read day frm rtc value is in acc.
//	day =(val&0x3f);
//	ack();
//
//	shin();				//read weekday frm rtc value is in acc.
//	weekday =(val&0x07);
//	ack();
//
//	shin();
//	month =(val&0x1f);	//read month frm rtc value is in acc.
//	ack();
//
//	shin();
//	year=(val & 0xff);	//read year frm rtc value is in acc.
//	//ack();
//	nack();			//No acknowledge
//
//	stop();			
//}	 */
/*--------rtc stop-------------*/
/*------------keypad starts from here--------*/
void init_keypad()
{
  	krl1=krl2=krl3=krl4=1;
  	dcount=33;
  	krcount=32;
  	check=key_ready=nkp=0;
}

void timer0()
{
	TMOD=0x01;
  	TH0=0xfc;
  	TL0=0x66;
  	IE=0x82;
  	TR0=1;  
}

void scanner()
{
	switch(check)
   	{
    	case 0:	sl1=0;			//for row 1
	  			sl2=sl3=sl4=1;
	  			//P0=ascci[temp];
				//disp1();
	  			c=krl1;
	  			key();
	  			check++;
	  			break;
		case 1:
	 			c=krl2;
	 			key();
	 			check++;
	 			break;
		case 2:
				c=krl3;
	 			key();
	 			check++;
	 			break;
		case 3:
				c=krl4;
	 			key();
	 			check++;
	 			break;
	
	 	case 4:	sl2=0;			//for row 2
	  			sl1=sl3=sl4=1;
	  			//P0=ascci[B];
				//disp2();
	  			c=krl1;
	  			key();
	  			check++;
	  			break;
		case 5:
				c=krl2;
	 			key();
	 			check++;
	 			break;
		case 6:
				c=krl3;
	 			key();
	 			check++;
	 			break;
		case 7:
				c=krl4;
	 			key();
	 			check++;
	 			break;
	
	 	case 8: sl3=0;			//for row 3
				sl1=sl2=sl4=1;
	  			//P0=ascci[B];
				//disp3();
	  			c=krl1;
	  			key();
	  			check++;
	  			break;	
		case 9:
				c=krl2;
	 			key();
	 			check++;
	 			break;
	
		case 10:
				c=krl3;
	 			key();
	 			check++;
	 			break;			
		case 11:
				c=krl4;
	 			key();
	 			check++;
	 			break;
	
	 	case 12: sl4=0;
				sl1=sl2=sl3=1;
	  			//P0=ascci[B];
				//disp4();
	  			c=krl1;
	  			key();
	  			check++;
	  			break;
		case 13:
				c=krl2;
	 			key();
	 			check++;
	 			break;
		case 14:
				c=krl3;
	 			key();
	 			check++;
	 			break;
		case 15:
		 		c=krl4;
	 			key();
	 			check++;
	 			break;
		case 16:
				check=0;
	  			break;	
   	}
}

void key()
{
	if(key_ready==0)
	{
   		if(dcount==33)
        {
     		if(c==0)
	 		{
	  			dcount--;
	  			key_code=check;
	 		}
   		}
   		else
     		debounce();
	}
	else
   		release();
}

void debounce()
{
  	dcount--;
  	if(dcount==0)
  	{
   		if(c==0)
   		{
    		 key_ready=1;
	         dcount=33;
   		}
   		else
    		dcount=33;
  	}
}

void release()
{
  	if(c==0)
  		krcount=32;
  	else
  	{
    	krcount--;
		if(krcount==0)
		{
	  		nkp=1;
	  		krcount=32;
		}
  	}
}

void key_release()
{
  	while(!nkp);
  	key_ready=0;
  	nkp=0;
}

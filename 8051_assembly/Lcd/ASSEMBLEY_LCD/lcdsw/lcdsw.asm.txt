;SW sw.asm
;--------------------------------------------------------------------
	CHIP 8052
	.list on
;--------------------------------------------------------------------
;conditional assembly...
;Choice of outputs..
SSD:		EQU	0
LCD:		EQU	1
TERMINAL:	EQU	0
;choice of inputs..
HEX_KEYPAD	EQU	1
PC_KEYBOARD	EQU	0	;SW data\data.equ
;-----------------------------------------------------------------
;---------------------------------------------------
;define byte variable...
ds1:		EQU	30h
ds2:		EQU	31h
ds3:		EQU	32h
ds4:		EQU	33h
dcount_1:	EQU	34h
dcount_2:	EQU	35h
dcount_3:	EQU	36h
dcount:		EQU	37h
count:		EQU	38h
scan_no:		EQU	39h
krcount:		EQU	3ah
key_code:	EQU	3bh
cnt_1sl:		EQU	3ch
cnt_1sh:		EQU	3dh
count16:		EQU	3eh
;---------------------------------------------------
;define immediate values..
top_of_stack:	EQU	60h	
;---------------------------------------------------

;--------------------------------------------------------------------
;SW data\data.equ
;-------------------------------------------------------------------
;define bit variables here...
;
A0:	REG	A.0
A1:	REG	A.1
A2:	REG	A.2
A3:	REG	A.3
A4:	REG	A.4
A5:	REG	A.5
A6:	REG	A.6
A7:	REG	A.7
;
rs:   	REG     P0.1    ;resgister select for LCD
r/w:   	REG     P0.2	;read/write for LCD
e:   	REG     P0.3	;enable for LCD
d4:   	REG     P0.4	;data bit d4 for LCD
d5:  	REG     P0.5	;data bit d5 for LCD
d6:   	REG     P0.6	;data bit d6 for LCD
d7:  	REG     P0.7	;data bit d7 for LCD
;
sl1:		REG	P2.0		;display1/row1
sl2:		REG	P2.1		;display2/row2
sl3:		REG	P2.2		;display3/row3
sl4:		REG	P2.3		;display4/row4
;
krl1:		REG	p2.4		;key return line 1
krl2:		REG	p2.5		;key return line 2
krl3:		REG	p2.6		;key return line 3
krl4:		REG	p2.7		;key return line 4

;----------------------------------------------------
key_ready:	REG	00h	;this flag is set when key is detected (after debounce).
nkp:		REG	01h	;this flag is set when no key is pressed.
tb:		REG	02h	;temp bit location
;----------------------------------------------------
start_sw:	REG	03h	;
s1_over:	REG	04h	;
first_time:	REG	05h	;
start_buzzer:	REG	06h	;buzzer bit
;--------------------------------------------------------------------

;-------------------------------------------------------------------
;SW data\data.def 
;--------------------------------------------------------------------
	org 	0000h
	jmp	main
;--------------------------------------------------------------------
;--------------------------------------------------------------------
	org     0003h
	reti			;ljmp	isr_i0
;
	org     000bh
	ljmp	isr_t0		;timer0 interrupt
;
	org     0013h
	reti			;ljmp    isr_i1
;
	org     001bh
	reti
	;ljmp	isr_t1		;timer1 interrupt
				;(isr_t1)baud rate for Usart
				;(...hence no Interrupt)
;
	org     0023h
         reti
	;ljmp    isr_receive         ;Interrupt enabled only for receive.
;
	org     002bh
         reti
	;ljmp    isr_t2
;
;--------------------------------------------------------------------
;--------------------------------------------------------------------
;Specification for stopwatch...
;A --> START	;start the stopwatch from the current count.
;B --> STOP	;stops the stopwatch current count frozen.
;C --> RESET	;reset the stopwatch to 0000.
;--------------------------------------------------------------------
main:
	mov	sp,#top_of_stack
	setb	ea		;enable all interrupts.
	call	init		;init timer,test's display,etc.
;
	call	disp_sw		;display stopwatch
l1_main:
	call	get_key_status	;carry set indicated key pressed
	jc	l2_main
	jb	first_time,l1_main
	call	disp_count
	jmp	l1_main
l2_main:
	call	get_key
	call	keyprocess
	jmp	l1_main

;--------------------------------------------------------------------
;--------------------------------------------------------------------
;init
;init_timer0
;init_timer1
;init_uart
;init_keypad
;init_delay_1sec
;init_sw
;--------------------------------------------------------------------




;--------------------------------------------------------------------
init:
;--------------------------
	call	init_timer0		;for 1ms interrupt
;--------------------------
	IF	SSD
	call	test_display		;in disp\disp.asm 
	ENDIF
;---------------------------
	IF	LCD
	call	lcd_init		;in lcd\lcd.asm
	ENDIF
;--------------------------
	IF	TERMINAL
	call	init_timer1		;for baud rate (9600)
	call	init_uart
	setb	ti
	ELSE
		IF	PC_KEYBOARD
		call	init_timer1		;for baud rate (9600)
		call	init_uart
		setb	ti
		ENDIF
	ENDIF
;--------------------------
	call	init_keypad
;--------------------------
	call	init_delay_1sec
;--------------------------
	call	init_sw
;--------------------------
	ret
;--------------------------------------------------------------------




;--------------------------------------------------------------------
;(89h)
;TMOD-->GATE, C/T, M1,	M0, GATE, C/T, M1, M0, T/C (timer1,timer0)
;init timer 0  for 1msec
init_timer0:
	orl	tmod,#01h		;t0 in 16 bit timer mode.
	mov	tl0,#66h		;Init timer0 with count for 1msec.
	mov	th0,#0fch		;count=0fc66h for 1msec.
	setb	tr0			;start timer 0.
        setb	et0			;enable timer 0 Interrupt.
	ret 
;--------------------------------------------------------------------




;--------------------------------------------------------------------
init_timer1:
	orl	tmod,#20h  		;t1 in 8 bit auto reload mode.
	mov     th1,#0fdh               ;init. TH1 with count for
					;9600 baud (11.059MHz)
	setb    tr1                     ;Start timer 1 (baud rate)
	ret 
;--------------------------------------------------------------------




;--------------------------------------------------------------------
;Code to initialise serial port.
init_uart:
	mov     scon,#01000000b            ;Init. serial control ie mode 1 ( 8 bit uart)
					   ;8 bit UART mode(variable).
	clr     ri                         ;Clear Receive Interrupt
	clr	ti                         ;Clear Transmit Interrupt
	setb    ren                        ;enable receiver
	;setb   es                  	   ;Enable serial interrupt
	ret
;--------------------------------------------------------------------




;--------------------------------------------------------------------
init_keypad:
	setb	krl1
	setb	krl2
	setb	krl3
	setb	krl4
	mov	scan_no,#00d
	mov	dcount,#33d
	mov	krcount,#32d
	clr	key_ready
	clr	nkp
	clr	start_buzzer
	ret
;--------------------------------------------------------------------




;--------------------------------------------------------------------
init_delay_1sec:
	mov	cnt_1sl,#0e8h
	mov	cnt_1sh,#04h
	setb	s1_over
	ret
;--------------------------------------------------------------------




;--------------------------------------------------------------------
init_sw:
	clr	start_sw
	setb	first_time
	ret
;--------------------------------------------------------------------

;--------------------------------------------------------------------
;isr_t0
;delay_1sec
;scanner
;k
;adisp1,2,3,4,disp_blank
;adisp_lut
;--------------------------------------------------------------------

;--------------------------------------------------------------------
isr_t0:
	push	a
	push	psw
	push	dph
	push	dpl

	call	init_timer0
;
	call	delay_1sec
;;--------------------------------------------
;testing isr...
;	jnb	s1_over,out_test
;	clr	s1_over
;	cpl	P0.0
;out_test:
;;--------------------------------------------
;
	call	buzzer
	call	scanner			;spoils a,psw,dptr
;
;----------------------------------
	jnb	start_sw,out_swl
	jnb	s1_over,out_isr
	call	inc_d
	clr	s1_over
out_swl:
;-----------------------------------
;
out_isr:
	pop	dpl
	pop	dph
	pop	psw
	pop	a
	reti
;--------------------------------------------------------------------


;-----------------------------------------------------------------------
;count for 1000ms (04e8h) is loaded in cnt_1sl (0e8h) and cnt_1sh (04h)
;s1_over flag initially set.
delay_1sec:
	jb	s1_over,out_d1sec
	djnz	cnt_1sl,out_d1sec
	djnz	cnt_1sh,reinit_1sl
;count over..
	mov	cnt_1sh,#04h
	mov	cnt_1sl,#0e8h
	setb	s1_over
	ret	
reinit_1sl:
	mov	cnt_1sl,#0ffh
out_d1sec:
	ret	
;--------------------------------------------------------------------


;--------------------------------------------------------------------
scanner:	
;-----------------------------------------------------------------
	mov	a,scan_no
;--------------------------------------------------------------------


;-(0)----------------------------------------------------------------
zero:
	cjne	a,#00d,one		;
;----------------------------------------
;key_output_line
	clr	sl1			;
	setb	sl2			;
	setb	sl3			;
	setb	sl4			;
;----------------------------------------
	call	adisp1
;----------------------------------------
	mov	c,krl1
	call	k
;----------------------------------------
	mov	scan_no,#01d
	ajmp	out_scanner
;--------------------------------------------------------------------


;-(1)----------------------------------------------------------------
one:
	cjne	a,#01d,two		;
;----------------------------------------

;----------------------------------------
	mov	c,krl2
	call	k
;----------------------------------------
	mov	scan_no,#02d	
	ajmp	out_scanner
;--------------------------------------------------------------------


;-(2)----------------------------------------------------------------
two:
	cjne	a,#02d,three		;
;----------------------------------------

;----------------------------------------
	mov	c,krl3
	call	k
;----------------------------------------
	mov	scan_no,#03d
	ajmp	out_scanner
;--------------------------------------------------------------------



;-(3)----------------------------------------------------------------
three:
	cjne	a,#03d,four		;
;----------------------------------------
	call	disp_blank
;----------------------------------------
	mov	c,krl4
	call	k
;----------------------------------------
	mov	scan_no,#04d
	ajmp	out_scanner
;--------------------------------------------------------------------



;-(4)----------------------------------------------------------------
four:
	cjne	a,#04d,five		;
;----------------------------------------
;key_output_line
	setb	sl1			;
	clr	sl2			;
	setb	sl3			;
	setb	sl4			;
;----------------------------------------
	call	adisp2
;----------------------------------------
	mov	c,krl1
	call	k
;----------------------------------------
	mov	scan_no,#05d
	ajmp	out_scanner
;--------------------------------------------------------------------



;-(5)----------------------------------------------------------------
five:
	cjne	a,#05d,six		;
;----------------------------------------

;----------------------------------------
	mov	c,krl2
	call	k
;----------------------------------------
	mov	scan_no,#06d
	ajmp	out_scanner
;--------------------------------------------------------------------



;-(6)----------------------------------------------------------------
six:
	cjne	a,#06d,seven		;
;----------------------------------------

;----------------------------------------
	mov	c,krl3
	call	k
;----------------------------------------
	mov	scan_no,#07d
	ajmp	out_scanner
;--------------------------------------------------------------------



;-(7)----------------------------------------------------------------
seven:
	cjne	a,#07d,eight		;
;----------------------------------------
	call	disp_blank
;----------------------------------------
	mov	c,krl4
	call	k
;----------------------------------------
	mov	scan_no,#08d
	ajmp	out_scanner
;--------------------------------------------------------------------



;-(8)----------------------------------------------------------------
eight:
	cjne	a,#08d,nine		;
;----------------------------------------
;key_output_line
	setb	sl1			;
	setb	sl2			;
	clr	sl3			;
	setb	sl4			;
;----------------------------------------
	call	adisp3
;----------------------------------------
	mov	c,krl1
	call	k
;----------------------------------------
	mov	scan_no,#09d
	ajmp	out_scanner
;--------------------------------------------------------------------


;-(9)----------------------------------------------------------------
nine:
	cjne	a,#09d,ten		;
;----------------------------------------

;----------------------------------------
	mov	c,krl2
	call	k
;----------------------------------------
	mov	scan_no,#10d
	ajmp	out_scanner
;--------------------------------------------------------------------

;-(10(a))------------------------------------------------------------
ten:
	cjne	a,#10d,eleven		;
;----------------------------------------

;----------------------------------------
	mov	c,krl3
	call	k
;----------------------------------------
	mov	scan_no,#11d
	ajmp	out_scanner
;--------------------------------------------------------------------


;-(11(b))------------------------------------------------------------
eleven:
	cjne	a,#11d,twelve		;
;----------------------------------------
	call	disp_blank
;----------------------------------------
	mov	c,krl4
	call	k
;----------------------------------------
	mov	scan_no,#12d
	ajmp	out_scanner
;--------------------------------------------------------------------


;-(12(c))------------------------------------------------------------
twelve:
	cjne	a,#12d,thirteen		;
;----------------------------------------
;key_output_line
	setb	sl1			;
	setb	sl2			;
	setb	sl3			;
	clr	sl4			;
;----------------------------------------
	call	adisp4
;----------------------------------------
	mov	c,krl1
	call	k
;----------------------------------------
	mov	scan_no,#13d
	ajmp	out_scanner
;--------------------------------------------------------------------

;-(13(d))------------------------------------------------------------
thirteen:
	cjne	a,#13d,fourteen		;
;----------------------------------------

;----------------------------------------
	mov	c,krl2
	call	k
;----------------------------------------
	mov	scan_no,#14d
	ajmp	out_scanner
;--------------------------------------------------------------------

;-(14(e))------------------------------------------------------------
fourteen:
	cjne	a,#14d,fifteen		;
;----------------------------------------

;----------------------------------------
	mov	c,krl3
	call	k
;----------------------------------------
	mov	scan_no,#15d
	ajmp	out_scanner
;--------------------------------------------------------------------

;-(15(f))------------------------------------------------------------
fifteen:
	cjne	a,#15d,dummy		;
;----------------------------------------
	call	disp_blank
;----------------------------------------
	mov	c,krl4
	call	k
;----------------------------------------
dummy:	mov	scan_no,#00d
	ajmp	out_scanner
;--------------------------------------------------------------------


;--------------------------------------------------------------------
out_scanner:
;	
	ret
;-----------------------------------------------------------------------


;-------------------------------------------------
;comes with c flag having the status of the corrosponding krl line.
k:
	jb	key_ready,out_debounce
;-------------------------------------
;key detect....
	mov	tb,c			;save carry bit
	mov	a,dcount
	cjne	a,#33d,debounce
	mov	c,tb			;restore carry bit
;key pressed for the first time...
	jc	out_k
	dec	dcount
	mov	key_code,scan_no	;copy the scan_no in key_code
	jmp	out_k
;-------------------------------------	
debounce:
	djnz	dcount,out_k
;debounce complete..now check for key press...
	mov	c,tb			;restore carry bit
	jc	spurious_key
	mov	dcount,#33d
	setb	key_ready		;key still pressed (after debounce)
	setb	start_buzzer		;buzzer on
	jmp	out_k
spurious_key:
	mov	dcount,#33d
	jmp	out_k
out_debounce:
;-------------------------------------
;check for key release...
	jc	l1_k
	mov	krcount,#32d
	jmp	out_k
l1_k:
	djnz	krcount,out_k
	setb	nkp
	clr	start_buzzer		;buzzer off
	mov	krcount,#32d
;	jmp	out_k
;-------------------------------------
out_k:
	ret		
;-----------------------------------------------


;------------------------------------------
adisp1:
	IF	SSD
	mov 	dptr,#adisp_lut
	mov 	a,ds1
	clr	c
	subb	a,#"0"
	movc 	a,@a+dptr
	mov 	p0,a
	ENDIF
	ret
;------------------------------------------


;------------------------------------------
adisp2:
	IF	SSD
	mov 	dptr,#adisp_lut
	mov 	a,ds2
	clr	c
	subb	a,#"0"
	movc 	a,@a+dptr
	mov 	p0,a
	ENDIF
	ret
;------------------------------------------

;------------------------------------------
adisp3:
	IF	SSD
	mov 	dptr,#adisp_lut
	mov 	a,ds3
	clr	c
	subb	a,#"0"
	movc 	a,@a+dptr
	mov 	p0,a
	ENDIF
	ret
;------------------------------------------

;------------------------------------------
adisp4:
	IF	SSD
	mov 	dptr,#adisp_lut
	mov 	a,ds4
	clr	c
	subb	a,#"0"
	movc 	a,@a+dptr
	mov 	p0,a
	ENDIF
	ret
;------------------------------------------

;------------------------------------------
disp_blank:
	IF	SSD
	mov 	p0,#00h
	ENDIF
	ret
;------------------------------------------

;-----------------------------------------------
adisp_lut:
;		-abcdefgd-		
	db	 11111100b	;0
	db	 01100000b	;1
	db	 11011010b	;2
	db	 11110010b	;3
	db	 01100110b	;4
	db	 10110110b	;5
	db	 10111110b	;6
	db	 11100000b	;7
	db	 11111110b	;8
	db	 11100110b	;9
;
	db	 11111111b	;3a
	db	 11111111b	;3b
	db	 11111111b	;3c
	db	 11111111b	;3d
	db	 11111111b	;3e
	db	 11111111b	;3f
	db	 11111111b	;40
;
	db	 11101110b	;A
	db	 00111110b	;B
	db	 10011100b	;C
	db	 01111010b	;D
	db	 10011110b	;E
	db	 10001110b	;F
	db	 10111100b	;G
	db	 01101110b	;H
	db	 00001100b	;I
	db	 01110000b	;J
	db	 00001110b	;K
	db	 00011100b	;L
	db	 10101010b	;M
	db	 00101010b	;N
	db	 00111010b	;O
	db	 11001110b	;P
	db	 11010110b	;Q
	db	 00001010b	;R
	db	 10110110b	;S
	db	 00011110b	;T
	db	 01111100b	;U
	db	 00111000b	;V
	db	 10111000b	;W
	db	 01100010b	;X
	db	 01100110b	;Y
	db	 10010010b	;Z
	db	 00000000b	;Z+1 for space
	db	 11111111b	;Z+2 for all segment glow
;-----------------------------------------------------------------------
;--------------------------------------------------------------------
;wait_5ms
;wait_20ms
;wait_1sec
;--------------------------------------------------------------------



;-----------------------------------------------
wait_5ms:
	mov	dcount_2,#21d
	mov	dcount_1,#0ffh		;$-3-3
	djnz	dcount_1,$		;$-3
	djnz	dcount_2,$-3-3
	ret
;-----------------------------------------------


;-----------------------------------------------
wait_20ms:
	mov	dcount_2,#55h
	mov	dcount_1,#0ffh		;$-3-3
	djnz	dcount_1,$		;$-3
	djnz	dcount_2,$-3-3
	ret
;-----------------------------------------------


;----------------------------------------------- 
wait_1sec:
	mov	dcount_3,#07d
l2:	mov 	dcount_2,#0ffh
l1:	mov 	dcount_1,#0ffh
	djnz 	dcount_1,$
	djnz 	dcount_2,l1
	djnz 	dcount_3,l2
	ret
;-----------------------------------------------
;-----------------------------------------------
test_display:
	mov	ds1,#"Z"+2	;glow all segments
	mov	ds2,#"Z"+2
	mov	ds3,#"Z"+2
	mov	ds4,#"Z"+2
;
	call	wait_1sec
;
	mov	ds1,#"Z"+1	;put off all segments
	mov	ds2,#"Z"+1
	mov	ds3,#"Z"+1
	mov	ds4,#"Z"+1
;
	call	wait_1sec
;
	ret
;-----------------------------------------------
buzzer:
	jnb	start_buzzer,out_b
	
	cpl	p1.5
	
out_b:
	ret	
;-----------------------------------------------
inc_d:
	inc 	ds1
	mov 	a,ds1
	cjne 	a,#"9"+1,$+3
	jnc 	l1_id 
	ret
;
l1_id:	mov 	ds1,#"0"
	inc 	ds2
	mov 	a,ds2
	cjne 	a,#"9"+1,$+3
	jnc 	l2_id
	ret
;
l2_id:	mov 	ds2,#"0"
	inc 	ds3
	mov 	a,ds3
	cjne 	a,#"9"+1,$+3 
	jnc 	l3_id
	ret
;
l3_id:	mov 	ds3,#"0"
	inc 	ds4 
	mov 	a,ds4
	cjne 	a,#"9"+1,out_id
;
	mov	ds1,#"0"
	mov	ds2,#"0"
	mov	ds3,#"0"
	mov	ds4,#"0"
;
out_id:
	ret
;-------------------------------------------------
;-------------------------------------------------
keyprocess:
	mov	a,key_code
;
	cjne	a,#"A",chk_b
;---------------------------
	call	process_a
	jmp	out_kp
;---------------------------
chk_b:	cjne	a,#"B",chk_c
;---------------------------
	call	process_b
	jmp	out_kp
;---------------------------
chk_c:	cjne	a,#"C",out_kp
;---------------------------
	call	process_c
	jmp	out_kp
;---------------------------
out_kp:
	call	key_release
	ret
;-------------------------------------------------




;---------------------------------------------------------------------
key_release:
;-------------------------------------------------
	IF	HEX_KEYPAD
	jnb	nkp,$	;wait for no key press flag
	clr	key_ready
	clr	nkp
	ret
	ENDIF
;-------------------------------------------------
;-------------------------------------------------
	IF	PC_KEYBOARD
	ret
	ENDIF
;-------------------------------------------------	
;---------------------------------------------------------------------




;---------------------------------------------------------------------
;gets ascii code for key pressed in "a" and key_code.
get_key:
;-------------------------------------------------
	IF	HEX_KEYPAD
	jnb	key_ready,$
	mov	a,key_code
	mov	dptr,#ascii_key
	movc	a,@a+dptr
	mov	key_code,a
	ret
ascii_key:	db	"0123456789ABCDEF"
	ENDIF
;-------------------------------------------------
;-------------------------------------------------
	IF	PC_KEYBOARD
	call	rx
	mov	key_code,a
	ret
	ENDIF
;-------------------------------------------------
;---------------------------------------------------------------------	




;---------------------------------------------------------------------
;gets ascii code for key pressed in "a" and key_code.
get_key_status:
;-------------------------------------------------
	IF	HEX_KEYPAD	
	mov	c,key_ready
	ret
	ENDIF
;-------------------------------------------------
;-------------------------------------------------
	IF	PC_KEYBOARD
	mov	c,ri
	ret
	ENDIF
;-------------------------------------------------
;---------------------------------------------------------------------
;-------------------------------------------------
process_a:
	jnb	first_time,l1_pa
	clr	first_time
	mov	ds1,#"0"
	mov	ds2,#"0"
	mov	ds3,#"0"
	mov	ds4,#"0"
l1_pa:
	setb	start_sw
	call	disp_sw_started
	ret
;-------------------------------------------------




;-------------------------------------------------
process_b:
	clr	start_sw
	call	disp_sw_stopped
	ret
;-------------------------------------------------




;-------------------------------------------------
process_c:
	clr	start_sw
;
	mov	ds1,#"0"		;reset count to 0000
	mov	ds2,#"0"
	mov	ds3,#"0"
	mov	ds4,#"0"
;
	call	disp_sw_resetted
	ret
;-------------------------------------------------
disp_sw:
;----------------------------------------------
	IF	SSD
	mov	ds1,#"Z"+1
	mov	ds2,#"Z"+1
	mov	ds3,#"W"
	mov	ds4,#"S"
	ret
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	LCD
	call 	clear_display
	mov	dptr,#m_sw
	call	wr_lcd_message16
	ret
;		-1234567890123456-
m_sw:	db	" WELCOME TO THE "
	db	" STOP WATCH PROG",#03h
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	TERMINAL
	mov	dptr,#m_sw
	call	send_m
	ret

m_sw:
;		-0        1         2         3         4	
;		-1234567890123456789012345678901234567890-
	db	"WELCOME TO THE STOPWATCH PROGRAM",#0Ah,#0Dh
	db	"Press A key to start the Stopwatch",#0Ah,#0Dh
	db	"Press B key to stop  the Stopwatch",#0Ah,#0Dh
	db	"Press C key to reset the Stopwatch",#0Ah,#0Dh,#03h
	ENDIF
;----------------------------------------------
;--------------------------------------------------------------------




;--------------------------------------------------------------------
disp_sw_started:
;----------------------------------------------
	IF	SSD
	ret
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	LCD
	call 	clear_display
	mov	dptr,#m_swstrt
	call	wr_lcd_message16
;
	mov	a,ds4
	call	wr_lcd_dw
;
;
	mov	a,ds3
	call	wr_lcd_dw
;
;
	mov	a,ds2
	call	wr_lcd_dw
;
;
	mov	a,ds1
	call	wr_lcd_dw
;
	ret

m_swstrt:
;		-1234567890123456-
	db	"    STOPWATCH   "
	db	" STARTED ",#03h
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	TERMINAL
	mov	a,#0Dh
	call	tx
	mov	dptr,#m_swstrt
	call	send_m
	ret

m_swstrt:
;		-0        1         2         3         4	
;		-1234567890123456789012345678901234567890-
	db	"STOPWATCH STARTED-->  ",#03h
	ENDIF
;----------------------------------------------
;--------------------------------------------------------------------




;--------------------------------------------------------------------
disp_sw_stopped:
;----------------------------------------------
	IF	SSD
	ret
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	LCD
	call 	clear_display
	mov	dptr,#m_swstp
	call	wr_lcd_message16
;
	mov	a,ds4
	call	wr_lcd_dw
;
;
	mov	a,ds3
	call	wr_lcd_dw
;
;
	mov	a,ds2
	call	wr_lcd_dw
;
;
	mov	a,ds1
	call	wr_lcd_dw
;
	ret

m_swstp:
;		-1234567890123456-
	db	"    STOPWATCH   "
	db	" STOPPED ",#03h
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	TERMINAL
	mov	a,#0Dh
	call	tx
	mov	dptr,#m_swstp
	call	send_m
	ret

m_swstp:
;		-0        1         2         3         4	
;		-1234567890123456789012345678901234567890-
	db	"STOPWATCH STOPPED-->  ",#03h
	ENDIF
;----------------------------------------------
;-------------------------------------------------------------------




;--------------------------------------------------------------------
disp_sw_resetted:
;----------------------------------------------
	IF	SSD
	ret
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	LCD
	call 	clear_display
	mov	dptr,#m_swrst
	call	wr_lcd_message16
;
	mov	a,ds4
	call	wr_lcd_dw
;
;
	mov	a,ds3
	call	wr_lcd_dw
;
;
	mov	a,ds2
	call	wr_lcd_dw
;
;
	mov	a,ds1
	call	wr_lcd_dw
;
	ret

m_swrst:
;		-1234567890123456-
	db	"    STOPWATCH   "
	db	"RESETTED ",#03h
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	TERMINAL
	mov	a,#0Dh
	call	tx
	mov	dptr,#m_swrst
	call	send_m
	ret

m_swrst:
;		-0        1         2         3         4	
;		-1234567890123456789012345678901234567890-
	db	"STOPWATCH RESETTED--> ",#03h
	ENDIF
;----------------------------------------------
;-------------------------------------------------------------------




;--------------------------------------------------------------------
disp_count:
;----------------------------------------------
	IF	SSD
	ret
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	LCD
	mov	a,#c0h+9d
	call	mov_lcd_cursor
;
	mov	a,ds4
	call	wr_lcd_dw
;
;
	mov	a,ds3
	call	wr_lcd_dw
;
;
	mov	a,ds2
	call	wr_lcd_dw
;
;
	mov	a,ds1
	call	wr_lcd_dw
;
	call	wait_1sec
	ret
	ENDIF
;----------------------------------------------
;----------------------------------------------
	IF	TERMINAL	
;
	mov	a,ds4
	call	tx
;
	mov	a,ds3
	call	tx
;
	mov	a,ds2
	call	tx
;
	mov	a,ds1
	call	tx
;
;Escape sequence (VT100) for moving cursor back 4 positions..( ESC[4D )
	mov	a,#1bh		;ESC
	call	tx
;
	mov	a,#"["
	call	tx
;
	mov	a,#"4"
	call	tx
;
	mov	a,#"D"
	call	tx
;
	ret
	ENDIF
;----------------------------------------------
;-------------------------------------------------------------------
IF	LCD
;-------------------------------------------------------------------------
lcd_init:
	call	wait_5ms
	call	wait_5ms
	call	wait_5ms
;
	mov	a,#30h			; port P07..P04 connected to d7_d4
	call	wr_lcd_cw0		
;-------------------------------------------------------------------------
	call	wait_5ms		;4.1ms
	mov	a,#30h			;
	call	wr_lcd_cw0
;-------------------------------------------------------------------------
	call	wait_5ms		;call	wait_100us
	mov	a,#30h			;
	call	wr_lcd_cw0
;----------------------------------------------------------------------
	call	wait_5ms		;call	wait_100us
	mov	a,#20h			;
	call	wr_lcd_cw0
;----------------------------------------------------------------------
lcd_init1:
		;function set init
		;rs=0, r/w=0, code= 0010 n f * * (8-bits)
		;n= 0 	1-line disp	f= 0  5x7 font
		; = 1 	2-line disp	 = 1  5x10 font
		;00101000b	;1-line, 5x7 font	;

;
	mov	a,#00101000b	;
	call	wr_lcd_cw
;-------------------------------------------------------------------------
		;cursor/disp shift	
		;rs=0, r/w=0, code= 0001 s/c r/l * *
		;s/c r/l= 00 cursor shifts left ie.-- add_counter
		;01 right ie.  ++ add_counter 		
		;10 display shifts left ie.cursor follows the display
		;11 right
;	
		;00010100b	;cursor shifts right
;
	mov	a,#00010100b	;
	call	wr_lcd_cw
;-------------------------------------------------------------------------
		;disp on/off control
		;r/s=0, r/w=0, code= 0000 1 d c b
		;d= 0 disp off,	c= 0 cursor off	,b= 0 blink off	 
		;   1      on,	   1        on  ,   1       on
		;00001111b	;00001100b
		;disp,on,cursor & blink off.
;
	mov	a,#00001110b	;
	call	wr_lcd_cw
;-------------------------------------------------------------------------
		;entry mode set
		;r/s=0, r/w=0, code= 000001 i/d s
		;i/d= 0 --add_counter, disp code & cursor shifts left	
		;   = 1 ++add_counter, right
		;s= 0 disable disp shift
		; = 1 shift disp right(i/d=0) or left(i/d=1)
		;0000 0110b	;displays code & cursor shifts right & ++add_counter
;
	mov	a,#00000110b	;
	call	wr_lcd_cw
;-------------------------------------------------------------------------
		;clear display
		;r/s=0, r/w=0, code= 0000 0001 
		;sets add_counter=0
		;space code= 20h in all ddram addresses
		;sets i/d=1
		;cursor at left end of display
		;00000001b
;
	mov	a,#00000001b	;
	call	wr_lcd_cw
;
;-------------------------------------------------------------------------
	clr	p0.0		;backlight on
;-------------------------------------------------------------------------
	ret
;-------------------------------------------------------------------------




;------------------------------------------------------
;write lcd control word. (control word in a) 
;without 5msec wait.
wr_lcd_cw0:
	call	map
	clr	rs		;Control 
	clr	r/w		;write
	call	toggle_e
	ret	
;------------------------------------------------------

;-----------------------------------------------------------
;clears display and moves cursor to start position.
clear_display:
	push	a
	call	busy	
	mov	a,#00000001b
	call	wr_lcd_cw
	call	wait_5ms
	pop	a
	ret
;------------------------------------------------------------


;------------------------------------------------------------
;set address in ddram		;address in a.(ie. 1xxxxxxxb)
;cursor moves to new address

mov_lcd_cursor:

;write lcd control word. (control word in a)

wr_lcd_cw:
	push	a
	call	busy		
;--------------------------------
	call	map
;--------------------------------
	clr	rs		;Control 
	clr	r/w		;write
	call	toggle_e
;--------------------------
	swap	a
	call	map
;--------------------------------
;
	call	toggle_e
;-------------------------------
	pop	a
	ret	
;------------------------------------------------------

;------------------------------------------------------
;write lcd data word. (data word in a)
wr_lcd_dw:
;--------------------------------
	push	a
	call	busy				
;--------------------------------
	call	map
;--------------------------------
	setb	rs		;data
	clr	r/w		;write
	call	toggle_e
;--------------------------------
	swap	a
	call	map
;--------------------------------
	call	toggle_e
;--------------------------------
	pop	a
	ret	
;------------------------------------------------------



;------------------------------------------------------
;converts 00..09 to display 0..9 (ascii) on lcd
wr_lcd_data:
	add	a,#30h
	call	wr_lcd_dw
	ret
;------------------------------------------------------



;------------------------------------------------------
busy:
;read lcd status word.
;
	setb	d7		;config (busy flag) as i/p
	clr	rs		;Status(Control) 
	setb	r/w		;read
	nop
	setb	e
	nop
	mov	c,d7		;copy busy flag to carry.
	nop
	clr	e
;-------------------------
	nop
	call	toggle_e
	jc	busy
	ret	
;------------------------------------------------------

;------------------------------------------------------
toggle_e:
	nop
	setb	e
	nop
	nop
	nop
	nop
	clr	e
	nop
;	
	ret
;------------------------------------------------------


;------------------------------------------------------
;maps value in a to lcd port.
map:
	mov	c,A4
	mov	d4,c
;
	mov	c,A5	
	mov	d5,c
;
	mov	c,A6	
	mov	d6,c
;
	mov	c,A7
	mov	d7,c
;
	ret	
;------------------------------------------------------






;------------------------------------------------------
;writes the message starting at the first location
;after 16 positions..it corrects the address for proper
;2 line 16 charc display.
;the string should be terminated by 03h.

wr_lcd_message16:
	mov	count16,#00h
	push	a
wlm_l1:
	mov	a,#00h
	movc	a,@a+dptr
	cjne	a,#03h,wlm_l2
	jmp	out_wlm
wlm_l2:
	call	wr_lcd_dw	;write at the current cursor position.
	inc	dptr
;
	inc	count16		;init to 00h
	mov	a,count16
	cjne	a,#16d,wlm_l1
;
	mov	a,#10101000b	;init new cursor position. 10101001b
	call	mov_lcd_cursor	
;
	jmp	wlm_l1
;
out_wlm:
	pop	a
	ret
;------------------------------------------------------


	ENDIF

 	IF	TERMINAL
	include	c:\sw\uart\uart.asm
	ELSE
		IF	PC_KEYBOARD
		include	c:\sw\uart\uart.asm
		ENDIF	
	ENDIF

;--------------------------------------------------------------------
	end




